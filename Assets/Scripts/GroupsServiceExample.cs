/*
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using Beamable;
using Beamable.Api.Autogenerated.Models;
using Beamable.Api.Groups;
using Beamable.Common.Api.Groups;
using Beamable.Experimental.Api.Chat;
using UnityEngine.Events;
using Message = Beamable.Experimental.Api.Chat.Message;

public class GroupsServiceExample : MonoBehaviour
{
    public RefreshedUnityEvent OnRefreshed = new RefreshedUnityEvent();
    private ChatView _chatView = null;
    private GroupsView _groupsView = null;
    private BeamContext _beamContext;
    private ChatService _chatService;
    private Groups _data = new Groups();

    protected void Start()
    {
        Debug.Log("Start()");
        SetupBeamable();
    }

    private async void SetupBeamable()
    {
        _beamContext = BeamContext.Default;
        await _beamContext.OnReady;
        _chatService = _beamContext.ServiceProvider.GetService<ChatService>();

        Debug.Log($"beamContext.UserId = {_beamContext.UserId}");

        _beamContext.Api.GroupsService.Subscribe(async groupsView =>
        {
            _groupsView = groupsView;
            _data.IsInGroup = _groupsView.Groups.Count > 0;
            Debug.Log("GroupsService.Subscribe 1: " + _groupsView.Groups.Count);
            _data.GroupNames.Clear();
            _data.GroupPlayerNames.Clear();
            foreach (var groupView in groupsView.Groups)
            {
                string groupName = $"Name = {groupView.Group.name}, Players = {groupView.Group.members.Count}";
                _data.GroupNames.Add(groupName);

                foreach (var member in groupView.Group.members)
                {
                    string groupPlayerName = $"Name = {member.gamerTag}";
                    _data.GroupPlayerNames.Add(groupPlayerName);
                }

                string roomName = $"Room For {groupView.Group.name}";
                await _chatService.CreateRoom(roomName, false, new List<long> { _beamContext.PlayerId });
            }
            Refresh();
        });

        _chatService.Subscribe(chatView =>
        {
            _chatView = chatView;
            int roomsWithPlayers = 0;
            _data.RoomNames.Clear();
            _data.RoomPlayerNames.Clear();
            foreach (RoomHandle room in chatView.roomHandles)
            {
                if (room.Players.Count > 0)
                {
                    roomsWithPlayers++;
                    string roomName = $"Name = {room.Name}, Players = {room.Players.Count}";
                    _data.RoomNames.Add(roomName);

                    foreach (var roomPlayerDbid in room.Players)
                    {
                        string roomPlayerName = $"Player = {roomPlayerDbid}";
                        _data.RoomPlayerNames.Add(roomPlayerName);
                    }

                    room.Subscribe().Then(_ =>
                    {
                        _data.RoomMessages.Clear();
                        foreach (var message in room.Messages)
                        {
                            string roomMessage = $"{message.gamerTag}: {message.content}";
                            _data.RoomMessages.Add(roomMessage);
                        }

                        room.OnMessageReceived += RoomHandle_OnMessageReceived;
                        Refresh();
                    });
                }
            }
            _data.IsInRoom = roomsWithPlayers > 0;
            Debug.Log("ChatService.Subscribe 1: " + roomsWithPlayers);
            Refresh();
        });
    }

    public async Task<EmptyResponse> SendGroupMessage()
    {
        foreach (RoomHandle room in _chatView.roomHandles)
        {
            await room.SendMessage(_data.MessageToSend);
        }
        return new EmptyResponse();
    }

    public async Task<EmptyResponse> CreateGroup()
    {
        await LeaveGroups();
        string groupName = _data.GroupToCreateName;
        string groupTag = "t01";
        string enrollmentType = "open";

        var groupSearchResponse = await _beamContext.Api.GroupsService.Search(groupName, new List<string> { enrollmentType });

        if (groupSearchResponse.groups.Count > 0)
        {
            foreach (var group in groupSearchResponse.groups)
            {
                await _beamContext.Api.GroupsService.JoinGroup(group.id);
            }
        }
        else
        {
            var groupCreateRequest = new GroupCreateRequest(groupName, groupTag, enrollmentType, 0, 50);
            var groupCreateResponse = await _beamContext.Api.GroupsService.CreateGroup(groupCreateRequest);
            var createdGroup = groupCreateResponse.group;

            await _beamContext.Api.GroupsService.JoinGroup(createdGroup.id);
        }

        _beamContext.Api.GroupsService.Subscribable.ForceRefresh();
        await Task.Delay(300);

        Refresh();
        return new EmptyResponse();
    }

    public async Task<EmptyResponse> LeaveGroups()
    {
        await LeaveRooms();

        foreach (var group in _groupsView.Groups)
        {
            await _beamContext.Api.GroupsService.LeaveGroup(group.Group.id);
        }

        _beamContext.Api.GroupsService.Subscribable.ForceRefresh();
        await Task.Delay(300);

        Refresh();
        return new EmptyResponse();
    }

    public async Task<EmptyResponse> LeaveRooms()
    {
        Debug.Log("_chatView 1: " + _chatView.roomHandles.Count);
        foreach (var room in _chatView.roomHandles)
        {
            await _chatService.LeaveRoom(room.Id);
        }

        Debug.Log("_chatView 2: " + _chatView.roomHandles.Count);

        _data.RoomMessages.Clear();
        Refresh();
        return new EmptyResponse();
    }

    public void Refresh()
    {
        int messageIndex = _data.RoomMessages.Count + 1;
        _data.MessageToSend = $"Hello {messageIndex:000}!";

        int groupIndex = _data.GroupNames.Count + 1;
        _data.GroupToCreateName = $"Group{groupIndex:000}";

        string refreshLog = $"Refresh() ...\n" +
                            $"\n * GroupNames.Count = {_data.GroupNames.Count}" +
                            $"\n * GroupPlayerNames.Count = {_data.GroupPlayerNames.Count}" +
                            $"\n * RoomNames.Count = {_data.RoomNames.Count}" +
                            $"\n * RoomUserNames.Count = {_data.RoomPlayerNames.Count}" +
                            $"\n * IsInGroup = {_data.IsInGroup}" +
                            $"\n * IsInRoom = {_data.IsInRoom}\n\n";
        Debug.Log(refreshLog);

        OnRefreshed?.Invoke(_data);
    }

    private void RoomHandle_OnMessageReceived(Message message)
    {
        string roomMessage = $"{message.gamerTag}: {message.content}";
        _data.RoomMessages.Add(roomMessage);
        Refresh();
    }
}
*/
